version: "3"

services:
  # A postgres DB used to store data by the API server microservice.
  votting-app-database:
    image: postgres:14.5
    container_name: voting-app-database
    restart: always
    environment:
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - "postgres:/var/lib/postgresql/data"
    ports:
      - "5432:5432"
    networks:
      - voting-app-network

  # The API server microservice.
  # It writes logs directly to the Loki service, exposes metrics for the Prometheus
  # service and sends traces to the Grafana Alloy instance.
  votting-app-server:
    build:
      context: ./Votting-App-Server
    container_name: voting-app-server
    restart: always
    ports:
      - "5000:5000"
    depends_on:
      - votting-app-database
    environment:
      - NAMESPACE=production
      - LOGS_TARGET=http://alloy:3100/loki/api/v1/push
      - TRACING_COLLECTOR_HOST=alloy
      - TRACING_COLLECTOR_PORT=4317
      - OTEL_EXPORTER_OTLP_TRACES_INSECURE=true
      - OTEL_RESOURCE_ATTRIBUTES=ip=1.2.3.5
    networks:
      - voting-app-network

  votting-app-client:
    build:
      context: ./Votting-App-Client
    container_name: voting-app-client
    restart: always
    ports:
      - "3001:3001"
    networks:
      - voting-app-network

  nginx:
    image: nginx:alpine
    container_name: voting-app-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - votting-app-client
      - votting-app-server
    networks:
      - voting-app-network

  # LABs Part

  alloy:
    image: grafana/alloy:v1.3.1
    container_name: alloy
    ports:
      - "12345:12345"
    volumes:
      - "./alloy/config.alloy:/etc/alloy/config.alloy"
      - "./alloy/endpoints.json:/etc/alloy/endpoints.json"
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      [
        "run",
        "--server.http.listen-addr=0.0.0.0:12345",
        "--stability.level=public-preview",
        "/etc/alloy/config.alloy",
      ]
    networks:
      - voting-app-network

  # The Loki service

  loki:
    image: grafana/loki:3.2.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml
    command:
      [
        "--pattern-ingester.enabled=true",
        "-config.file=/etc/loki/local-config.yaml ",
      ]
    environment:
      - LOKI_VALIDATION_ALLOW_STRUCTURED_METADATA=true
    networks:
      - voting-app-network

  mimir:
    image: grafana/mimir:2.13.0
    container_name: mimir
    ports:
      - "9009:9009"
    volumes:
      - ./mimir/mimir-config.yaml:/etc/mimir/mimir-config.yaml
    command:
      [
        "-ingester.native-histograms-ingestion-enabled=true",
        "-config.file=/etc/mimir/mimir-config.yaml",
      ]
    networks:
      - voting-app-network

  # The Tempo service stores traces send to it by Grafana Alloy, and takes
  # queries from Grafana to visualise those traces.

  tempo:
    image: grafana/tempo:2.6.0
    ports:
      - "3200:3200"
      - "4317:4317"
      - "4318:4318"
    command: ["-config.file=/etc/tempo-config.yaml"]
    volumes:
      - "./tempo/tempo-config.yaml:/etc/tempo-config.yaml"
    networks:
      - voting-app-network

  grafana:
    image: grafana/grafana:11.4.0
    volumes:
      - "./grafana/provisioning:/etc/grafana/provisioning"
      - "./grafana/grafana.ini:/etc/grafana/grafana.ini"
    ports:
      - "3000:3000"
    environment:
      - GF_FEATURE_TOGGLES_ENABLE=flameGraph traceqlSearch traceQLStreaming correlations metricsSummary traceqlEditor traceToMetrics traceToProfiles datatrails
      - GF_INSTALL_PLUGINS=grafana-lokiexplore-app,grafana-exploretraces-app,grafana-pyroscope-app
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - voting-app-network

 
 
 
  influxdb_exporter:
    image: prom/influxdb-exporter:v0.12.0
    container_name: influxdb_exporter
    ports:
      - "9122:9122"
    environment:
      INFLUXDB_URL: http://influxdb:8086
    depends_on:
      - influxdb
    networks:
      - voting-app-network

  influxdb:
    image: influxdb:2.0
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - name=value
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=12345678
      - DOCKER_INFLUXDB_INIT_ORG=grafana
      - DOCKER_INFLUXDB_INIT_BUCKET=metrics
    user: "1000:1000"
    volumes:
      - influxdb-data:/var/lib/influxdb
    networks:
      - voting-app-network

  telegraf:
    image: telegraf:1.32 
    container_name: telegraf
    restart: always
    user: root
    entrypoint: /bin/bash -c "chmod 777 /var/run/docker.sock && /entrypoint.sh telegraf"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /:/hostfs
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
    environment:
      - HOST_ETC=/hostfs/etc
      - HOST_PROC=/hostfs/proc
      - HOST_SYS=/hostfs/sys
      - HOST_VAR=/hostfs/var
      - HOST_RUN=/hostfs/run
      - HOST_MOUNT_PREFIX=/hostfs
    depends_on:
      - influxdb
    links:
      - influxdb
    ports:
      - "8125:8125"
    networks:
      - voting-app-network


  k6:
    image: grafana/k6:0.53.0
    volumes:
      - "./k6:/scripts"
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://mimir:9009/api/v1/push
      - K6_DURATION=3600s
      - K6_VUS=4
      - K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM=true
    restart: always
    command: ["run", "-o", "experimental-prometheus-rw", "/scripts/mythical-loadtest.js"]



networks:
  voting-app-network:
    driver: bridge

volumes:
  grafana:
  postgres:
  influxdb-data:
